const express = require("express");
const cors = require("cors");
const Database = require("better-sqlite3");

const app = express();
const db = new Database("shop.db");

app.use(cors());
app.use(express.json());

// Crear tablas
db.exec(`
  CREATE TABLE IF NOT EXISTS categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
  );

  CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    description TEXT,
    image TEXT,
    category_id INTEGER,
    stock INTEGER DEFAULT 0,
    FOREIGN KEY (category_id) REFERENCES categories (id)
  );

  CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT NOT NULL,
    total REAL NOT NULL,
    status TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS order_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER,
    product_id INTEGER,
    quantity INTEGER,
    price REAL,
    FOREIGN KEY (order_id) REFERENCES orders (id),
    FOREIGN KEY (product_id) REFERENCES products (id)
  );

  CREATE TABLE IF NOT EXISTS reviews (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER,
    user_id TEXT NOT NULL,
    rating INTEGER NOT NULL,
    comment TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products (id)
  );

  CREATE TABLE IF NOT EXISTS notifications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT NOT NULL,
    message TEXT NOT NULL,
    type TEXT NOT NULL,
    read BOOLEAN DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );
`);

// Rutas para productos
app.get("/api/products", (req, res) => {
  const { search, category, minPrice, maxPrice } = req.query;
  let query =
    "SELECT p.*, c.name as category_name FROM products p LEFT JOIN categories c ON p.category_id = c.id WHERE 1=1";
  const params = [];

  if (search) {
    query += " AND (p.name LIKE ? OR p.description LIKE ?)";
    params.push(`%${search}%`, `%${search}%`);
  }

  if (category) {
    query += " AND p.category_id = ?";
    params.push(category);
  }

  if (minPrice) {
    query += " AND p.price >= ?";
    params.push(minPrice);
  }

  if (maxPrice) {
    query += " AND p.price <= ?";
    params.push(maxPrice);
  }

  const products = db.prepare(query).all(...params);
  res.json(products);
});

// Rutas para categorías
app.get("/api/categories", (req, res) => {
  const categories = db.prepare("SELECT * FROM categories").all();
  res.json(categories);
});

app.post("/api/categories", (req, res) => {
  const { name } = req.body;
  try {
    const result = db
      .prepare("INSERT INTO categories (name) VALUES (?)")
      .run(name);
    res.json({ id: result.lastInsertRowid });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Actualizar producto con stock
app.put("/api/products/:id", (req, res) => {
  const { name, price, description, image, category_id, stock } = req.body;
  try {
    db.prepare(
      `
      UPDATE products 
      SET name = ?, price = ?, description = ?, image = ?, category_id = ?, stock = ?
      WHERE id = ?
    `
    ).run(name, price, description, image, category_id, stock, req.params.id);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post("/api/orders", (req, res) => {
  const { userId, items, total } = req.body;

  const order = db
    .prepare("INSERT INTO orders (user_id, total, status) VALUES (?, ?, ?)")
    .run(userId, total, "pending");

  items.forEach((item) => {
    db.prepare(
      "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)"
    ).run(order.lastInsertRowid, item.id, item.quantity, item.price);
  });

  res.json({ orderId: order.lastInsertRowid });
});

// Rutas de administración
app.post("/api/products", (req, res) => {
  const { name, price, description, image } = req.body;
  try {
    const result = db
      .prepare(
        "INSERT INTO products (name, price, description, image) VALUES (?, ?, ?, ?)"
      )
      .run(name, price, description, image);
    res.json({ id: result.lastInsertRowid });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.delete("/api/products/:id", (req, res) => {
  try {
    db.prepare("DELETE FROM products WHERE id = ?").run(req.params.id);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Rutas para estadísticas
app.get("/api/stats/sales", (req, res) => {
  try {
    const totalSales = db
      .prepare(
        `
      SELECT COUNT(*) as total_orders, 
             SUM(total) as total_revenue 
      FROM orders
    `
      )
      .get();

    const salesByCategory = db
      .prepare(
        `
      SELECT c.name, COUNT(oi.id) as items_sold, SUM(oi.price * oi.quantity) as revenue
      FROM order_items oi
      JOIN products p ON oi.product_id = p.id
      JOIN categories c ON p.category_id = c.id
      GROUP BY c.id
    `
      )
      .all();

    const recentOrders = db
      .prepare(
        `
      SELECT o.*, COUNT(oi.id) as items_count
      FROM orders o
      LEFT JOIN order_items oi ON o.id = oi.order_id
      GROUP BY o.id
      ORDER BY o.created_at DESC
      LIMIT 5
    `
      )
      .all();

    res.json({
      totalSales,
      salesByCategory,
      recentOrders,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
// Rutas para reseñas
app.post("/api/reviews", (req, res) => {
  const { product_id, user_id, rating, comment } = req.body;
  try {
    const result = db
      .prepare(
        "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)"
      )
      .run(product_id, user_id, rating, comment);

    // Crear notificación para el admin
    db.prepare(
      "INSERT INTO notifications (user_id, message, type) VALUES (?, ?, ?)"
    ).run("admin", `Nueva reseña para el producto ${product_id}`, "review");

    res.json({ id: result.lastInsertRowid });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get("/api/products/:id/reviews", (req, res) => {
  const reviews = db
    .prepare(
      "SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC"
    )
    .all(req.params.id);
  res.json(reviews);
});

// Rutas para notificaciones
app.get("/api/notifications/:userId", (req, res) => {
  const notifications = db
    .prepare(
      "SELECT * FROM notifications WHERE user_id = ? ORDER BY created_at DESC"
    )
    .all(req.params.userId);
  res.json(notifications);
});

app.put("/api/notifications/:id/read", (req, res) => {
  db.prepare("UPDATE notifications SET read = 1 WHERE id = ?").run(
    req.params.id
  );
  res.json({ success: true });
});
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
